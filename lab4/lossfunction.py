# -*- coding: utf-8 -*-
"""lossfunction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Q8dJ6w26LXJiabzLy9kRRxsszPLleBb
"""

import numpy as np

class LossFunc:

  def __init__(self):
    pass

  def hinge_loss(self,W,X_tr,y_tr):
    s = W.dot(X_tr)
    y_s = s[y_tr, np.arange(X_tr.shape[1])]
    margin = np.maximum(0, s-y_s+1)
    margin[y_tr, np.arange(X_tr.shape[1])] = 0
    loss_i = np.sum(margin, axis = 0)

    return np.mean(loss_i)

  def softmax_loss(self,W,X_tr,y_tr):
    s = W.dot(X_tr)
    exp_s = np.exp(s)

    norm_y_s = exp_s / np.sum(exp_s, axis=0)
    loss_i = -np.log(norm_y_s[y_tr, np.arange(X_tr.shape[1])])

    return np.mean(loss_i)

"""return value를 np.sum(loss_i)로 해도 최적의 W를 찾는데에 지장은 없음."""